#
# ____  _        _      _              _        ____  _         _
#/ ___|| | _____| | ___| |_ ___  _ __ (_) ___  / ___|| |_ _   _| |_   _ ___
#\___ \| |/ / _ \ |/ _ \ __/ _ \| '_ \| |/ __| \___ \| __| | | | | | | / __|
# ___) |   <  __/ |  __/ || (_) | | | | | (__   ___) | |_| |_| | | |_| \__ \
#|____/|_|\_\___|_|\___|\__\___/|_| |_|_|\___| |____/ \__|\__, |_|\__,_|___/
#                                                         |___/
# Skeletonic Stylus Library
# https://skeletonicstylus.com/
#
# Copyright (c) Sebastien Rousseau 2021. All rights reserved
# Licensed under the MIT license
#
# This workflow checks out code, performs a Codacy security scan
# and integrates the results with the GitHub Advanced Security code scanning feature.
#
# For more information on the Codacy security scan action usage and parameters, see
#
# https://github.com/codacy/codacy-analysis-cli-action.
#
# For more information on Codacy Analysis CLI in general, see
# https://github.com/codacy/codacy-analysis-cli.
#

name: Codacy Security Scan

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '43 19 * * 4'

jobs:
  codacy-security-scan:
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v2

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@4.2.0
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif
